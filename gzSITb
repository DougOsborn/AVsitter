//start_unprocessed_text
/*/*
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * Copyright © the AVsitter Contributors (http://avsitter.github.io)
 * AVsitter™ is a trademark. For trademark use policy see:
 * https://avsitter.github.io/TRADEMARK.mediawiki
 *
 * Please consider supporting continued development of AVsitter and
 * receive automatic updates and other benefits! All details and user
 * instructions can be found at http://avsitter.github.io
 *|/

string product = "AVsitter™";
string version = "2.2";
string BRAND;
integer OLD_HELPER_METHOD;
string main_script = "[AV]sitA";
string select_script = "[AV]select";
integer SET;
integer ETYPE;
integer MTYPE;
integer SWAP;
integer AMENU;
integer SELECT;
integer SCRIPT_CHANNEL;
integer number_of_sitters;
string CUSTOM_TEXT;
string ADJUST_MENU;
string SITTER_INFO;
list MENU_LIST;
list DATA_LIST;
list POS_ROT_LIST;
integer helper_mode;
integer has_RLV;
integer ANIM_INDEX;
integer FIRST_INDEX = -1;
integer menu_handle;
integer menu_channel;
integer current_menu = -1;
integer last_menu;
string submenu_info;
integer menu_page;
key MY_SITTER;
key CONTROLLER;
string RLVDesignations;
string onSit;
integer speed_index;
integer verbose = 0;

Out(integer level, string out)
{
    if (verbose >= level)
    {
        llOwnerSay(llGetScriptName() + "[" + version + "]:" + out);
    }
}

send_anim_info(integer broadcast)
{
    llMessageLinked(LINK_THIS, 90055, (string)SCRIPT_CHANNEL, llDumpList2String([llList2String(MENU_LIST, ANIM_INDEX), llList2String(DATA_LIST, ANIM_INDEX), llList2String(POS_ROT_LIST, ANIM_INDEX * 2), llList2String(POS_ROT_LIST, ANIM_INDEX * 2 + 1), broadcast, speed_index], "|"));
}

Readout_Say(string say)
{
    llMessageLinked(LINK_THIS, 90022, say, (string)SCRIPT_CHANNEL);
}

list order_buttons(list buttons)
{
    return llList2List(buttons, -3, -1) + llList2List(buttons, -6, -4) + llList2List(buttons, -9, -7) + llList2List(buttons, -12, -10);
}

memory()
{
    llOwnerSay(llGetScriptName() + "[" + version + "] " + (string)llGetListLength(MENU_LIST) + " Items Ready, Mem=" + (string)(65536 - llGetUsedMemory()));
}

integer animation_menu(integer animation_menu_function)
{
    if ((animation_menu_function == -1 || llGetListLength(MENU_LIST) < 2) && (!helper_mode) && llGetInventoryType(select_script) == INVENTORY_SCRIPT)
    {
        llMessageLinked(LINK_SET, 90009, CONTROLLER, MY_SITTER);
    }
    else
    {
        string menu = product + version;
        if (BRAND != "")
            menu = BRAND;
        if (CONTROLLER != MY_SITTER || has_RLV)
        {
            menu += "\n\nMenu for " + llKey2Name(MY_SITTER);
        }
        menu += "\n\n";
        if (CUSTOM_TEXT != "")
        {
            menu += CUSTOM_TEXT + "\n";
        }
        if (SITTER_INFO != "")
        {
            menu += "[" + llList2String(llParseStringKeepNulls(SITTER_INFO, ["�"], []), 0) + "]";
        }
        else if (number_of_sitters > 1)
        {
            menu += "[Sitter " + (string)SCRIPT_CHANNEL + "]";
        }
        integer anim_has_speeds;
        string animation_file = llList2String(llParseStringKeepNulls(llList2String(DATA_LIST, ANIM_INDEX), ["�"], []), 0);
        if (llGetInventoryType(animation_file + "+") == INVENTORY_ANIMATION)
        {
            anim_has_speeds = TRUE;
        }
        string CURRENT_POSE_NAME;
        if (FIRST_INDEX != -1)
        {
            CURRENT_POSE_NAME = llList2String(MENU_LIST, ANIM_INDEX);
            menu += " [" + llList2String(llParseString2List(CURRENT_POSE_NAME, ["P:"], []), 0);
            if (anim_has_speeds)
            {
                if (speed_index < 0)
                {
                    menu += ", Soft";
                }
                else if (speed_index > 0)
                {
                    menu += ", Hard";
                }
            }
            menu += "]";
        }
        integer total_items;
        integer i = current_menu + 1;
        while (i++ < llGetListLength(MENU_LIST) && llSubStringIndex(llList2String(MENU_LIST, i), "M:"))
        {
            ++total_items;
        }
        list menu_items0;
        list menu_items2;
        if (current_menu != -1 || llGetInventoryType(select_script) == INVENTORY_SCRIPT)
        {
            menu_items0 += "[BACK]";
        }
        string submenu_info;
        if (current_menu != -1)
        {
            submenu_info = llList2String(DATA_LIST, current_menu);
        }
        if (helper_mode)
        {
            menu_items2 += "[NEW]";
            if (CURRENT_POSE_NAME != "")
            {
                menu_items2 += "[DUMP]";
                menu_items2 += "[SAVE]";
            }
        }
        else if (llSubStringIndex(submenu_info, "V") != -1)
        {
            menu_items0 += "<< Softer";
            menu_items0 += "Harder >>";
        }
        if (AMENU == 2 || (AMENU == 1 && current_menu == -1) || llSubStringIndex(submenu_info, "A") != -1)
        {
            if (!(OLD_HELPER_METHOD && helper_mode))
            {
                menu_items2 += "[ADJUST]";
            }
        }
        if (llSubStringIndex(onSit, "ASK") && ((current_menu == -1 && SWAP == 1) || SWAP == 2 || llSubStringIndex(submenu_info, "S") != -1) && (number_of_sitters > 1 && llGetInventoryType(select_script) != INVENTORY_SCRIPT))
        {
            menu_items2 += "[SWAP]";
        }
        if (current_menu == -1)
        {
            if (has_RLV && (llGetSubString(RLVDesignations, SCRIPT_CHANNEL, SCRIPT_CHANNEL) == "D" || CONTROLLER != MY_SITTER))
            {
                menu_items2 += "[STOP]";
                if (!helper_mode)
                {
                    menu_items2 += ["Control..."];
                }
            }
        }
        integer items_per_page = 12 - llGetListLength(menu_items2) - llGetListLength(menu_items0);
        if (items_per_page < total_items)
        {
            menu_items2 += ["[<<]", "[>>]"];
            items_per_page -= 2;
        }
        list menu_items1;
        integer page_start = (i = current_menu + 1 + menu_page * items_per_page);
        do
        {
            if (i < llGetListLength(MENU_LIST))
            {
                string m = llList2String(MENU_LIST, i);
                if (!llSubStringIndex(m, "M:"))
                {
                    jump end;
                }
                if (llListFindList(["T:", "P:", "B:"], [llGetSubString(m, 0, 1)]) == -1)
                {
                    menu_items1 += m;
                }
                else
                {
                    menu_items1 += llGetSubString(m, 2, -1);
                }
            }
        }
        while (++i < page_start + items_per_page);
        @end;
        if (animation_menu_function == 1)
        {
            integer pages = total_items / (12 - llGetListLength(menu_items2) - llGetListLength(menu_items0));
            if ((total_items % (12 - llGetListLength(menu_items2) - llGetListLength(menu_items0))) == 0)
            {
                pages--;
            }
            return pages;
        }
        if (submenu_info == "V")
        {
            while (llGetListLength(menu_items1) < items_per_page)
            {
                menu_items1 += " ";
            }
        }
        llListenRemove(menu_handle);
        menu_handle = llListen(menu_channel, "", CONTROLLER, "");
        llDialog(CONTROLLER, menu, order_buttons(menu_items0 + menu_items1 + menu_items2), menu_channel);
    }
    return 0;
}

default
{
    state_entry()
    {
        memory();
        SCRIPT_CHANNEL = (integer)llGetSubString(llGetScriptName(), llSubStringIndex(llGetScriptName(), " "), -1);
        if (SCRIPT_CHANNEL)
            main_script += " " + (string)SCRIPT_CHANNEL;
        if (llGetInventoryType(main_script) == INVENTORY_SCRIPT)
        {
            llResetOtherScript(main_script);
        }
    }

    listen(integer listen_channel, string name, key id, string msg)
    {
        string channel;
        integer index = llListFindList(MENU_LIST, [msg]);
        if (index == -1)
        {
            channel = (string)SCRIPT_CHANNEL;
            index = llListFindList(MENU_LIST, ["P:" + msg]);
        }
        if (index != -1)
        {
            llMessageLinked(LINK_THIS, 90050, (string)channel + "|" + msg + "|" + (string)SET, MY_SITTER);
            llMessageLinked(LINK_THIS, 90000, msg, channel);
            if (MTYPE != 2 && MTYPE != 4)
            {
                llMessageLinked(LINK_THIS, 90005, "", llDumpList2String([id, MY_SITTER], "|"));
            }
            return;
        }
        index = llListFindList(MENU_LIST, ["M:" + msg]);
        if (index != -1)
        {
            llMessageLinked(LINK_SET, 90051, (string)channel + "|" + llGetSubString(msg, 0, -2) + "|" + (string)SET, MY_SITTER);
            menu_page = 0;
            last_menu = current_menu;
            current_menu = index;
            animation_menu(0);
            return;
        }
        index = llListFindList(MENU_LIST, ["B:" + msg]);
        if (index != -1)
        {
            list button_data = llParseStringKeepNulls(llList2String(DATA_LIST, index), ["�"], []);
            if (llList2String(button_data, 1) != "")
            {
                msg = llList2String(button_data, 1);
            }
            integer n = llList2Integer(button_data, 0);
            if (llGetListLength(button_data) > 2)
            {
                id = llList2String(button_data, 2);
            }
            else if (CONTROLLER != MY_SITTER)
            {
                id = llDumpList2String([CONTROLLER, MY_SITTER], "|");
            }
            llMessageLinked(LINK_SET, n, msg, id);
            return;
        }
        if (msg == "[>>]" || msg == "[<<]")
        {
            if (msg == "[<<]")
            {
                if (--menu_page == -1)
                {
                    menu_page = animation_menu(1);
                }
            }
            else
            {
                if (++menu_page > animation_menu(1))
                {
                    menu_page = 0;
                }
            }
            animation_menu(0);
        }
        else if (msg == "[BACK]")
        {
            menu_page = 0;
            if (current_menu == -1)
            {
                if (llGetInventoryType(select_script) == INVENTORY_SCRIPT)
                {
                    llMessageLinked(LINK_SET, 90009, "", id);
                }
                return;
            }
            else
            {
                if (last_menu != -1)
                {
                    current_menu = last_menu;
                    last_menu = -1;
                }
                else
                {
                    current_menu = llListFindList(MENU_LIST, ["T:" + llGetSubString(llList2String(MENU_LIST, current_menu), 2, -1)]);
                    if (current_menu != -1)
                    {
                        current_menu -= 1;
                        while (current_menu != -1 && llSubStringIndex(llList2String(MENU_LIST, current_menu), "M:") != 0)
                        {
                            current_menu--;
                        }
                    }
                }
            }
            animation_menu(0);
        }
        else if (msg == "Control..." || msg == "[STOP]")
        {
            llMessageLinked(LINK_SET, 90100, llDumpList2String([SCRIPT_CHANNEL, msg, MY_SITTER], "|"), id);
        }
        else if (index == -1)
        {
            llMessageLinked(LINK_SET, 90101, llDumpList2String([SCRIPT_CHANNEL, msg, CONTROLLER], "|"), MY_SITTER);
        }
    }

    changed(integer change)
    {
        if (change & CHANGED_LINK)
        {
            if (llGetAgentSize(llGetLinkKey(llGetNumberOfPrims())) == ZERO_VECTOR)
            {
                speed_index = 0;
                if (!OLD_HELPER_METHOD)
                {
                    helper_mode = FALSE;
                }
                MY_SITTER = "";
                ANIM_INDEX = FIRST_INDEX;
            }
            else
            {
                if (OLD_HELPER_METHOD)
                {
                    helper_mode = FALSE;
                }
            }
        }
    }

    link_message(integer sender, integer num, string msg, key id)
    {
        integer one = (integer)msg;
        integer two = (integer)((string)id);
        if (num == 90000 || num == 90010 || num == 90003)
        {
            integer index = llListFindList(MENU_LIST, [msg]);
            if (index == -1)
            {
                index = llListFindList(MENU_LIST, ["P:" + msg]);
            }
            integer doit;
            if (id == "")
            {
                doit = TRUE;
            }
            else if (id) // OSS::else if (osIsUUID(id) && id != NULL_KEY)
            {
                if (id == MY_SITTER)
                {
                    doit = TRUE;
                }
            }
            else if (two == SCRIPT_CHANNEL)
            {
                doit = TRUE;
            }
            if (doit && (index != -1 || msg == ""))
            {
                ANIM_INDEX = index;
                integer broadcast = TRUE;
                send_anim_info(broadcast);
                return;
            }
            if (ETYPE == 2)
            {
                if (num != 90010 && llGetSubString(llList2String(MENU_LIST, ANIM_INDEX), 0, 1) != "P:")
                {
                    if (MY_SITTER != "")
                    {
                        llUnSit(MY_SITTER);
                    }
                }
            }
        }
        else if (num == 90045 && sender == llGetLinkNumber() && (ETYPE == 1 || ETYPE == 2))
        {
            list data = llParseStringKeepNulls(msg, ["|"], []);
            string OLD_SYNC = llList2String(data, 5);
            if (OLD_SYNC != "" && llList2String(MENU_LIST, ANIM_INDEX) == OLD_SYNC)
            {
                ANIM_INDEX = FIRST_INDEX;
                send_anim_info(TRUE);
            }
        }
        else if (num == 90033)
        {
            llListenRemove(menu_handle);
        }
        else if (num == 90004 || num == 90005)
        {
            list data = llParseStringKeepNulls(id, ["|"], []);
            if ((key)llList2String(data, -1) == MY_SITTER)
            {
                key lastController = CONTROLLER;
                CONTROLLER = (key)llList2String(data, 0);
                integer index = llListFindList(MENU_LIST, ["M:" + msg + "*"]);
                if (num == 90004)
                {
                    current_menu = -1;
                }
                else if (index != -1)
                {
                    last_menu = -1;
                    menu_page = 0;
                    current_menu = index;
                    msg = "";
                }
                animation_menu((integer)msg);
            }
        }
        else if (num == 90030 && (one == SCRIPT_CHANNEL || two == SCRIPT_CHANNEL))
        {
            CONTROLLER = MY_SITTER = "";
        }
        else if (num == 90100 || num == 90101)
        {
            list data = llParseStringKeepNulls(msg, ["|"], []);
            if (llList2String(data, 1) == "[HELPER]")
            {
                menu_page = 0;
                helper_mode = !helper_mode;
                if ((key)llList2String(data, 2) == MY_SITTER && !OLD_HELPER_METHOD)
                {
                    animation_menu(0);
                }
            }
            else if (llList2String(data, 1) == "[ADJUST]")
            {
                helper_mode = FALSE;
                menu_page = 0;
            }
            else if (llList2String(data, 1) == "Harder >>")
            {
                ++speed_index;
                if (speed_index > 1)
                    speed_index = 1;
                send_anim_info(FALSE);
            }
            else if (llList2String(data, 1) == "<< Softer")
            {
                --speed_index;
                if (speed_index < -1)
                    speed_index = -1;
                send_anim_info(FALSE);
            }
        }
        else if (num == 90201)
        {
            has_RLV = FALSE;
        }
        else if (num == 90202)
        {
            has_RLV = (integer)msg;
        }
        else if (one == SCRIPT_CHANNEL)
        {
            list data = llParseStringKeepNulls(id, ["|"], []);
            integer index = llListFindList(MENU_LIST, [llList2String(data, 0)]);
            if (index == -1)
            {
                index = llListFindList(MENU_LIST, ["P:" + llList2String(data, 0)]);
            }
            if (num == 90299)
            {
                MENU_LIST = DATA_LIST = POS_ROT_LIST = [];
            }
            else if (num == 90070)
            {
                CONTROLLER = MY_SITTER = id;
                menu_page = 0;
                current_menu = -1;
                menu_channel = ((integer)llFrand(0x7FFFFF80) + 1) * -1; // 7FFFFF80 = max float < 2^31
                llListenRemove(menu_handle);
            }
            else if (num == 90065 && sender == llGetLinkNumber())
            {
                CONTROLLER = MY_SITTER = "";
                llListenRemove(menu_handle);
            }
            else if (num == 90300)
            {
                integer place_to_add = llGetListLength(MENU_LIST);
                if (llGetListLength(data) > 2)
                {
                    place_to_add = current_menu;
                    while (place_to_add < llGetListLength(MENU_LIST) && llSubStringIndex(llList2String(MENU_LIST, place_to_add + 1), "M:") != 0)
                    {
                        ++place_to_add;
                    }
                    if (llSubStringIndex(llList2String(MENU_LIST, place_to_add + 1), "M:") == 0)
                    {
                        ++place_to_add;
                    }
                }
                MENU_LIST = llListInsertList(MENU_LIST, [llList2String(data, 0)], place_to_add);
                DATA_LIST = llListInsertList(DATA_LIST, [llList2String(data, 1)], place_to_add);
                POS_ROT_LIST = llListInsertList(POS_ROT_LIST, [0, 0], place_to_add * 2);
                if (llGetListLength(data) == 4)
                {
                    if (FIRST_INDEX == -1)
                    {
                        FIRST_INDEX = place_to_add;
                    }
                    if (index != -1)
                    {
                        place_to_add = index;
                    }
                    POS_ROT_LIST = llListReplaceList(POS_ROT_LIST, [(vector)llList2String(data, 2), (vector)llList2String(data, 3)], place_to_add * 2, place_to_add * 2 + 1);
                    ANIM_INDEX = place_to_add;
                    send_anim_info(TRUE);
                    memory();
                }
            }
            else if (num == 90301)
            {
                if (index != -1)
                {
                    POS_ROT_LIST = llListReplaceList(POS_ROT_LIST, [(vector)llList2String(data, 1), (vector)llList2String(data, 2)], index * 2, index * 2 + 1);
                    if (llGetListLength(data) != 3)
                    {
                        send_anim_info(FALSE);
                    }
                }
            }
            else if (num == 90302)
            {
                number_of_sitters = (integer)llList2String(data, 0);
                SITTER_INFO = llList2String(data, 1);
                SET = (integer)llList2String(data, 2);
                MTYPE = (integer)llList2String(data, 3);
                ETYPE = (integer)llList2String(data, 4);
                SWAP = (integer)llList2String(data, 5);
                FIRST_INDEX = ANIM_INDEX = llListFindList(MENU_LIST, [llList2String(data, 6)]);
                BRAND = llList2String(data, 7);
                CUSTOM_TEXT = llList2String(data, 8);
                ADJUST_MENU = llList2String(data, 9);
                SELECT = (integer)llList2String(data, 10);
                AMENU = (integer)llList2String(data, 11);
                OLD_HELPER_METHOD = (integer)llList2String(data, 12);
                RLVDesignations = llList2String(data, 13);
                onSit = llList2String(data, 14);
                memory();
            }
            else if (num == 90020 && llList2String(data, 0) == "")
            {
                Readout_Say("V:" + llDumpList2String([version, MTYPE, ETYPE, SET, SWAP, SITTER_INFO, CUSTOM_TEXT, ADJUST_MENU, SELECT, AMENU, OLD_HELPER_METHOD], "|"));
                integer i = -1;
                while (++i < llGetListLength(MENU_LIST))
                {
                    llSleep(0.5);
                    Readout_Say("S:" + llList2String(MENU_LIST, i) + "|" + llList2String(DATA_LIST, i));
                }
                i = -1;
                while (++i < llGetListLength(MENU_LIST))
                {
                    if (llList2Vector(POS_ROT_LIST, i * 2) != ZERO_VECTOR)
                    {
                        llSleep(0.2);
                        Readout_Say("{" + llList2String(MENU_LIST, i) + "}" + llList2String(POS_ROT_LIST, i * 2) + llList2String(POS_ROT_LIST, i * 2 + 1));
                    }
                }
                llMessageLinked(LINK_THIS, 90021, (string)SCRIPT_CHANNEL, "");
            }
        }
    }
}
*/
//end_unprocessed_text
//nfo_preprocessor_version 0
//program_version LSL PyOptimizer v0.2.1beta
//mono

string ResumeVoid;
integer IsRestoring;
string UThread = "[AV]sitA";
integer g_;
integer gC;
integer edefaultchanged;
integer J;
integer L;
integer edefaultstate_entry;
integer System;
integer N;
string E;
string O;
string gB;
list Library;
list G;
list F;
integer I;
integer gD;
integer edefaultchat;
integer IsSaveDue = -1;
integer LslUserScript;
integer K;
integer M = -1;
integer LslLibrary;
integer H;
key P;
key UThreadStackFrame;
string edefaultlink_message;
string gA;
integer Pop;
A(integer Q)
{
    llMessageLinked(((integer)-4), 90055, (string)System, llDumpList2String(
        [ llList2String(Library, edefaultchat)
        , llList2String(G, edefaultchat)
        , llList2String(F, edefaultchat * 2)
        , llList2String(F, -~(edefaultchat * 2))
        , Q
        , Pop
        ], "|"));
}
_(string Q)
{
    llMessageLinked(((integer)-4), 90022, Q, (string)System);
}
list C(list Q)
{
    return llList2List(Q, ((integer)-3), ((integer)-1)) + llList2List(Q, ((integer)-6), ((integer)-4)) + llList2List(Q, ((integer)-9), ((integer)-7)) + llList2List(Q, ((integer)-12), ((integer)-10));
}
D()
{
    llOwnerSay(llGetScriptName() + "[2.2] " + (string)(Library != []) + " Items Ready, Mem=" + (string)(65536 + -llGetUsedMemory()));
}
integer B(integer Q)
{
    if ((!((~Q) & -(1 < (Library != [])) | I)) & llGetInventoryType("[AV]select") == 10)
    {
        llMessageLinked(((integer)-1), 90009, UThreadStackFrame, P);
    }
    else
    {
        string loc_menu = "AVsitter™2.2";
        if (!(ResumeVoid == ""))
            loc_menu = ResumeVoid;
        if (!(UThreadStackFrame == P & (!gD)))
        {
            loc_menu = loc_menu + ("\n\nMenu for " + llKey2Name(P));
        }
        loc_menu = loc_menu + "\n\n";
        if (!(E == ""))
        {
            loc_menu = loc_menu + (E + "\n");
        }
        if (!(gB == ""))
        {
            loc_menu = loc_menu + ("[" + llList2String(llParseStringKeepNulls(gB, (list)"�", []), 0) + "]");
        }
        else if (1 < N)
        {
            loc_menu = loc_menu + ("[Sitter " + (string)System + "]");
        }
        integer loc_anim_has_speeds;
        string loc_animation_file = llList2String(llParseStringKeepNulls(llList2String(G, edefaultchat), (list)"�", []), 0);
        if (llGetInventoryType(loc_animation_file + "+") == 20)
        {
            loc_anim_has_speeds = 1;
        }
        string loc_CURRENT_POSE_NAME;
        if (~IsSaveDue)
        {
            loc_CURRENT_POSE_NAME = llList2String(Library, edefaultchat);
            loc_menu = loc_menu + (" [" + llList2String(llParseString2List(loc_CURRENT_POSE_NAME, (list)"P:", []), 0));
            if (loc_anim_has_speeds)
            {
                if (Pop & ((integer)-2147483648))
                {
                    loc_menu = loc_menu + ", Soft";
                }
                else if (0 < Pop)
                {
                    loc_menu = loc_menu + ", Hard";
                }
            }
            loc_menu = loc_menu + "]";
        }
        integer loc_total_items;
        integer loc_i = -~M;
        while (-(loc_i++ < (Library != [])) & llSubStringIndex(llList2String(Library, loc_i), "M:"))
        {
            ++loc_total_items;
        }
        list loc_menu_items0;
        list loc_menu_items2;
        if ((~M) | llGetInventoryType("[AV]select") == 10)
        {
            loc_menu_items0 = loc_menu_items0 + "[BACK]";
        }
        string loc_submenu_info;
        if (~M)
        {
            loc_submenu_info = llList2String(G, M);
        }
        if (I)
        {
            loc_menu_items2 = loc_menu_items2 + "[NEW]";
            if (!(loc_CURRENT_POSE_NAME == ""))
            {
                loc_menu_items2 = loc_menu_items2 + "[DUMP]";
                loc_menu_items2 = loc_menu_items2 + "[SAVE]";
            }
        }
        else if (~llSubStringIndex(loc_submenu_info, "V"))
        {
            loc_menu_items0 = loc_menu_items0 + "<< Softer";
            loc_menu_items0 = loc_menu_items0 + "Harder >>";
        }
        if (!(-!(L == 2) & ((~-L) | (~M)) & -!~llSubStringIndex(loc_submenu_info, "A")))
        {
            if ((!IsRestoring) | (!I))
            {
                loc_menu_items2 = loc_menu_items2 + "[ADJUST]";
            }
        }
        if (llSubStringIndex(gA, "ASK") & -!(((~M) | (~-J)) & -!(J == 2) & -!~llSubStringIndex(loc_submenu_info, "S")) & -(1 < N & (!(llGetInventoryType("[AV]select") == 10))))
        {
            loc_menu_items2 = loc_menu_items2 + "[SWAP]";
        }
        if (!~M)
        {
            if (gD & -!((!(llGetSubString(edefaultlink_message, System, System) == "D")) & UThreadStackFrame == P))
            {
                loc_menu_items2 = loc_menu_items2 + "[STOP]";
                if (!I)
                {
                    loc_menu_items2 = loc_menu_items2 + "Control...";
                }
            }
        }
        integer loc_items_per_page = 12 + -(loc_menu_items2 != []) + -(loc_menu_items0 != []);
        if (loc_items_per_page < loc_total_items)
        {
            loc_menu_items2 = loc_menu_items2 + ["[<<]", "[>>]"];
            loc_items_per_page = ~-~-loc_items_per_page;
        }
        list loc_menu_items1;
        integer loc_page_start = loc_i = -~M + H * loc_items_per_page;
        do
        {
            if (loc_i < (Library != []))
            {
                string loc_m = llList2String(Library, loc_i);
                if (!llSubStringIndex(loc_m, "M:"))
                {
                    jump J_autoGen00001;
                }
                if (!~llListFindList(["T:", "P:", "B:"], (list)llGetSubString(loc_m, 0, 1)))
                {
                    loc_menu_items1 = loc_menu_items1 + loc_m;
                }
                else
                {
                    loc_menu_items1 = loc_menu_items1 + llGetSubString(loc_m, 2, ((integer)-1));
                }
            }
        }
        while (++loc_i < loc_page_start + loc_items_per_page);
        @J_autoGen00001;
        if (!~-Q)
        {
            integer loc_pages = loc_total_items / (12 + -(loc_menu_items2 != []) + -(loc_menu_items0 != []));
            if (!(loc_total_items % (12 + -(loc_menu_items2 != []) + -(loc_menu_items0 != []))))
            {
                --loc_pages;
            }
            return loc_pages;
        }
        if (loc_submenu_info == "V")
        {
            while ((loc_menu_items1 != []) < loc_items_per_page)
            {
                loc_menu_items1 = loc_menu_items1 + " ";
            }
        }
        llListenRemove(LslUserScript);
        LslUserScript = llListen(K, "", UThreadStackFrame, "");
        llDialog(UThreadStackFrame, loc_menu, C(loc_menu_items0 + loc_menu_items1 + loc_menu_items2), K);
    }
    return 0;
}
default
{
    state_entry()
    {
        D();
        System = (integer)llGetSubString(llGetScriptName(), llSubStringIndex(llGetScriptName(), " "), ((integer)-1));
        if (System)
            UThread = UThread + (" " + (string)System);
        if (llGetInventoryType(UThread) == 10)
        {
            llResetOtherScript(UThread);
        }
    }
    listen(integer R, string S, key T, string Q)
    {
        string loc_channel;
        integer loc_index = llListFindList(Library, (list)Q);
        if (!~loc_index)
        {
            loc_channel = (string)System;
            loc_index = llListFindList(Library, (list)("P:" + Q));
        }
        if (~loc_index)
        {
            llMessageLinked(((integer)-4), 90050, loc_channel + "|" + Q + "|" + (string)g_, P);
            llMessageLinked(((integer)-4), 90000, Q, loc_channel);
            if (!(edefaultchanged == 2 | edefaultchanged == 4))
            {
                llMessageLinked(((integer)-4), 90005, "", llDumpList2String([T, P], "|"));
            }
            return;
        }
        loc_index = llListFindList(Library, (list)("M:" + Q));
        if (~loc_index)
        {
            llMessageLinked(((integer)-1), 90051, loc_channel + "|" + llGetSubString(Q, 0, ((integer)-2)) + "|" + (string)g_, P);
            H = 0;
            LslLibrary = M;
            M = loc_index;
            B(0);
            return;
        }
        loc_index = llListFindList(Library, (list)("B:" + Q));
        if (~loc_index)
        {
            list loc_button_data = llParseStringKeepNulls(llList2String(G, loc_index), (list)"�", []);
            if (!(llList2String(loc_button_data, 1) == ""))
            {
                Q = llList2String(loc_button_data, 1);
            }
            integer loc_n = llList2Integer(loc_button_data, 0);
            if (2 < (loc_button_data != []))
            {
                T = llList2String(loc_button_data, 2);
            }
            else if (!(UThreadStackFrame == P))
            {
                T = llDumpList2String([UThreadStackFrame, P], "|");
            }
            llMessageLinked(((integer)-1), loc_n, Q, T);
            return;
        }
        if (Q == "[>>]" | Q == "[<<]")
        {
            if (Q == "[<<]")
            {
                if (!~--H)
                {
                    H = B(1);
                }
            }
            else
            {
                if (B(1) < ++H)
                {
                    H = 0;
                }
            }
            B(0);
        }
        else if (Q == "[BACK]")
        {
            H = 0;
            if (!~M)
            {
                if (llGetInventoryType("[AV]select") == 10)
                {
                    llMessageLinked(((integer)-1), 90009, "", T);
                }
                return;
            }
            else
            {
                if (~LslLibrary)
                {
                    M = LslLibrary;
                    LslLibrary = ((integer)-1);
                }
                else
                {
                    M = llListFindList(Library, (list)("T:" + llGetSubString(llList2String(Library, M), 2, ((integer)-1))));
                    if (~M)
                    {
                        M = ~-M;
                        while (!((!~M) | (!llSubStringIndex(llList2String(Library, M), "M:"))))
                        {
                            --M;
                        }
                    }
                }
            }
            B(0);
        }
        else if (Q == "Control..." | Q == "[STOP]")
        {
            llMessageLinked(((integer)-1), 90100, llDumpList2String([System, Q, P], "|"), T);
        }
        else if (!~loc_index)
        {
            llMessageLinked(((integer)-1), 90101, llDumpList2String([System, Q, UThreadStackFrame], "|"), P);
        }
    }
    changed(integer Q)
    {
        if (Q & 32)
        {
            if (llGetAgentSize(llGetLinkKey(llGetNumberOfPrims())) == <((float)0), ((float)0), ((float)0)>)
            {
                Pop = 0;
                if (!IsRestoring)
                {
                    I = 0;
                }
                P = "";
                edefaultchat = IsSaveDue;
            }
            else
            {
                if (IsRestoring)
                {
                    I = 0;
                }
            }
        }
    }
    link_message(integer S, integer R, string Q, key T)
    {
        integer loc_one = (integer)Q;
        integer loc_two = (integer)((string)T);
        if (R == 90000 | R == 90010 | R == 90003)
        {
            integer loc_index = llListFindList(Library, (list)Q);
            if (!~loc_index)
            {
                loc_index = llListFindList(Library, (list)("P:" + Q));
            }
            integer loc_doit;
            if (T == "")
            {
                loc_doit = 1;
            }
            else if (T)
            {
                if (T == P)
                {
                    loc_doit = 1;
                }
            }
            else if (loc_two == System)
            {
                loc_doit = 1;
            }
            if (!((!loc_doit) | (!((~loc_index) | Q == ""))))
            {
                edefaultchat = loc_index;
                A(1);
                return;
            }
            if (gC == 2)
            {
                if (!(R == 90010 | llGetSubString(llList2String(Library, edefaultchat), 0, 1) == "P:"))
                {
                    if (!(P == ""))
                    {
                        llUnSit(P);
                    }
                }
            }
        }
        else if (R == 90045 & S == llGetLinkNumber() & (!((~-gC) & -!(gC == 2))))
        {
            list loc_data = llParseStringKeepNulls(Q, (list)"|", []);
            string loc_OLD_SYNC = llList2String(loc_data, 5);
            if ((!(loc_OLD_SYNC == "")) & llList2String(Library, edefaultchat) == loc_OLD_SYNC)
            {
                edefaultchat = IsSaveDue;
                A(1);
            }
        }
        else if (R == 90033)
        {
            llListenRemove(LslUserScript);
        }
        else if (R == 90004 | R == 90005)
        {
            list loc_data = llParseStringKeepNulls(T, (list)"|", []);
            if ((key)llList2String(loc_data, ((integer)-1)) == P)
            {
                UThreadStackFrame = (key)llList2String(loc_data, 0);
                integer loc_index = llListFindList(Library, (list)("M:" + Q + "*"));
                if (R == 90004)
                {
                    M = ((integer)-1);
                }
                else if (~loc_index)
                {
                    LslLibrary = ((integer)-1);
                    H = 0;
                    M = loc_index;
                    Q = "";
                }
                B((integer)Q);
            }
        }
        else if (R == 90030 & (loc_one == System | loc_two == System))
        {
            UThreadStackFrame = P = "";
        }
        else if (R == 90100 | R == 90101)
        {
            list loc_data = llParseStringKeepNulls(Q, (list)"|", []);
            if (llList2String(loc_data, 1) == "[HELPER]")
            {
                H = 0;
                I = !I;
                if ((key)llList2String(loc_data, 2) == P & (!IsRestoring))
                {
                    B(0);
                }
            }
            else if (llList2String(loc_data, 1) == "[ADJUST]")
            {
                I = 0;
                H = 0;
            }
            else if (llList2String(loc_data, 1) == "Harder >>")
            {
                ++Pop;
                if (1 < Pop)
                    Pop = 1;
                A(0);
            }
            else if (llList2String(loc_data, 1) == "<< Softer")
            {
                --Pop;
                if (Pop < ((integer)-1))
                    Pop = ((integer)-1);
                A(0);
            }
        }
        else if (R == 90201)
        {
            gD = 0;
        }
        else if (R == 90202)
        {
            gD = (integer)Q;
        }
        else if (loc_one == System)
        {
            list loc_data = llParseStringKeepNulls(T, (list)"|", []);
            integer loc_index = llListFindList(Library, (list)llList2String(loc_data, 0));
            if (!~loc_index)
            {
                loc_index = llListFindList(Library, (list)("P:" + llList2String(loc_data, 0)));
            }
            if (R == 90299)
            {
                Library = G = F = [];
            }
            else if (R == 90070)
            {
                UThreadStackFrame = P = T;
                H = 0;
                M = ((integer)-1);
                K = ~(integer)llFrand(2147483520);
                llListenRemove(LslUserScript);
            }
            else if (R == 90065 & S == llGetLinkNumber())
            {
                UThreadStackFrame = P = "";
                llListenRemove(LslUserScript);
            }
            else if (R == 90300)
            {
                integer loc_place_to_add = Library != [];
                if (2 < (loc_data != []))
                {
                    loc_place_to_add = M;
                    while (-(loc_place_to_add < (Library != [])) & llSubStringIndex(llList2String(Library, -~loc_place_to_add), "M:"))
                    {
                        ++loc_place_to_add;
                    }
                    if (!llSubStringIndex(llList2String(Library, -~loc_place_to_add), "M:"))
                    {
                        ++loc_place_to_add;
                    }
                }
                Library = llListInsertList(Library, (list)llList2String(loc_data, 0), loc_place_to_add);
                G = llListInsertList(G, (list)llList2String(loc_data, 1), loc_place_to_add);
                F = llListInsertList(F, [0, 0], loc_place_to_add + loc_place_to_add);
                if (loc_data != [] == 4)
                {
                    if (!~IsSaveDue)
                    {
                        IsSaveDue = loc_place_to_add;
                    }
                    if (~loc_index)
                    {
                        loc_place_to_add = loc_index;
                    }
                    F = llListReplaceList(F, [(vector)llList2String(loc_data, 2), (vector)llList2String(loc_data, 3)], loc_place_to_add + loc_place_to_add, -~(loc_place_to_add + loc_place_to_add));
                    edefaultchat = loc_place_to_add;
                    A(1);
                    D();
                }
            }
            else if (R == 90301)
            {
                if (~loc_index)
                {
                    F = llListReplaceList(F, [(vector)llList2String(loc_data, 1), (vector)llList2String(loc_data, 2)], loc_index + loc_index, -~(loc_index + loc_index));
                    if (!(loc_data != [] == 3))
                    {
                        A(0);
                    }
                }
            }
            else if (R == 90302)
            {
                N = (integer)llList2String(loc_data, 0);
                gB = llList2String(loc_data, 1);
                g_ = (integer)llList2String(loc_data, 2);
                edefaultchanged = (integer)llList2String(loc_data, 3);
                gC = (integer)llList2String(loc_data, 4);
                J = (integer)llList2String(loc_data, 5);
                IsSaveDue = edefaultchat = llListFindList(Library, (list)llList2String(loc_data, 6));
                ResumeVoid = llList2String(loc_data, 7);
                E = llList2String(loc_data, 8);
                O = llList2String(loc_data, 9);
                edefaultstate_entry = (integer)llList2String(loc_data, 10);
                L = (integer)llList2String(loc_data, 11);
                IsRestoring = (integer)llList2String(loc_data, 12);
                edefaultlink_message = llList2String(loc_data, 13);
                gA = llList2String(loc_data, 14);
                D();
            }
            else if (R == 90020 & llList2String(loc_data, 0) == "")
            {
                _("V:" + llDumpList2String(
                    [ "2.2"
                    , edefaultchanged
                    , gC
                    , g_
                    , J
                    , gB
                    , E
                    , O
                    , edefaultstate_entry
                    , L
                    , IsRestoring
                    ], "|"));
                integer loc_i = ((integer)-1);
                while (++loc_i < (Library != []))
                {
                    llSleep(0.5);
                    _("S:" + llList2String(Library, loc_i) + "|" + llList2String(G, loc_i));
                }
                loc_i = ((integer)-1);
                while (++loc_i < (Library != []))
                {
                    if (!(llList2Vector(F, loc_i + loc_i) == <((float)0), ((float)0), ((float)0)>))
                    {
                        llSleep(0.2);
                        _("{" + llList2String(Library, loc_i) + "}" + llList2String(F, loc_i + loc_i) + llList2String(F, -~(loc_i + loc_i)));
                    }
                }
                llMessageLinked(((integer)-4), 90021, (string)System, "");
            }
        }
    }
}
